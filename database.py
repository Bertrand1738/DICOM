import psycopg2
import json
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

conn = psycopg2.connect(
    dbname=os.getenv("POSTGRES_DB", "mmedconv2"),
    user=os.getenv("POSTGRES_USER", "dummy_user"),
    password=os.getenv("POSTGRES_PASSWORD", "dummy_password"),
    host=os.getenv("POSTGRES_HOST", "dummy_host"),
    port=os.getenv("POSTGRES_PORT", "5432")
)
conn.autocommit = True
cur = conn.cursor()

def save_upload_record(upload_id, filename, ext, upload_time, ip, storage_path, sha256_hash):
    cur.execute("""
        INSERT INTO public.uploads (id, original_filename, file_type, upload_time, uploader_ip, storage_path, sha256_hash, encrypted, status)
        VALUES (%s, %s, %s, %s, %s, %s, %s, TRUE, 'processed')
    """, (upload_id, filename, ext, upload_time, ip, storage_path, sha256_hash))

def save_dicom_metadata(upload_id, dicom_converted, anonymized, removed_tags, processed_at):
    cur.execute("""
        INSERT INTO public.dicom_metadata (upload_id, dicom_converted, anonymized, removed_tags, processed_at)
        VALUES (%s, %s, %s, %s, %s)
    """, (upload_id, dicom_converted, anonymized, json.dumps(removed_tags), processed_at))

def save_ml_result(upload_id, model_version, diagnosis, confidence, analyzed_at):
    cur.execute("""
        INSERT INTO public.ml_results (upload_id, model_version, diagnosis, confidence_score, analyzed_at)
        VALUES (%s, %s, %s, %s, %s)
    """, (upload_id, model_version, diagnosis, confidence, analyzed_at))

def save_audit_log(upload_id, action, timestamp, ip, status, details):
    cur.execute("""
        INSERT INTO public.audit_log (upload_id, action, timestamp, ip_address, status, details)
        VALUES (%s, %s, %s, %s, %s, %s)
    """, (upload_id, action, timestamp, ip, status, json.dumps(details)))

def save_wix_upload(user_id, upload_id, upload_time):
    """
    Save upload data to wix_uploads table
    
    Args:
        user_id (str): The user ID from your frontend/Wix
        upload_id (str): The upload ID generated by your service
        upload_time (datetime): The time of upload
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        cur.execute("""
            INSERT INTO public.wix_uploads (user_id, upload_id, upload_time)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id, upload_id) DO UPDATE SET
                upload_time = EXCLUDED.upload_time,
                created_at = CURRENT_TIMESTAMP
        """, (user_id, upload_id, upload_time))
        return True
    except Exception as e:
        print(f"Error saving to wix_uploads: {e}")
        return False

def get_user_uploads(user_id):
    """
    Get all uploads for a specific user
    
    Args:
        user_id (str): The user ID to search for
        
    Returns:
        list: List of upload records for the user
    """
    try:
        cur.execute("""
            SELECT 
                wu.user_id,
                wu.upload_id,
                wu.upload_time,
                wu.created_at,
                u.original_filename,
                u.file_type,
                u.status,
                ml.diagnosis,
                ml.confidence_score
            FROM public.wix_uploads wu
            LEFT JOIN public.uploads u ON wu.upload_id = u.id
            LEFT JOIN public.ml_results ml ON wu.upload_id = ml.upload_id
            WHERE wu.user_id = %s
            ORDER BY wu.upload_time DESC
        """, (user_id,))
        
        columns = [desc[0] for desc in cur.description]
        results = cur.fetchall()
        
        return [dict(zip(columns, row)) for row in results]
    except Exception as e:
        print(f"Error getting user uploads: {e}")
        return []

def get_upload_by_id(upload_id):
    """
    Get upload data by upload ID
    
    Args:
        upload_id (str): The upload ID to search for
        
    Returns:
        dict: Upload data or None if not found
    """
    try:
        cur.execute("""
            SELECT 
                wu.user_id,
                wu.upload_id,
                wu.upload_time,
                wu.created_at,
                u.original_filename,
                u.file_type,
                u.status,
                u.uploader_ip,
                ml.diagnosis,
                ml.confidence_score
            FROM public.wix_uploads wu
            LEFT JOIN public.uploads u ON wu.upload_id = u.id
            LEFT JOIN public.ml_results ml ON wu.upload_id = ml.upload_id
            WHERE wu.upload_id = %s
        """, (upload_id,))
        
        result = cur.fetchone()
        if result:
            columns = [desc[0] for desc in cur.description]
            return dict(zip(columns, result))
        return None
    except Exception as e:
        print(f"Error getting upload by ID: {e}")
        return None

def get_wix_upload_stats():
    """
    Get statistics about wix uploads
    
    Returns:
        dict: Statistics about uploads
    """
    try:
        cur.execute("""
            SELECT 
                COUNT(*) as total_uploads,
                COUNT(DISTINCT user_id) as unique_users,
                MAX(upload_time) as latest_upload,
                MIN(upload_time) as earliest_upload
            FROM public.wix_uploads
        """)
        
        result = cur.fetchone()
        if result:
            return {
                "total_uploads": result[0],
                "unique_users": result[1],
                "latest_upload": result[2].isoformat() if result[2] else None,
                "earliest_upload": result[3].isoformat() if result[3] else None
            }
        return {"total_uploads": 0, "unique_users": 0, "latest_upload": None, "earliest_upload": None}
    except Exception as e:
        print(f"Error getting upload stats: {e}")
        return {"error": str(e)}
